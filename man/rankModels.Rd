% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Module_rankModels.R
\name{rankModels}
\alias{rankModels}
\title{Calculate age-specific and overall model rank.}
\usage{
rankModels(dat, columnToRank = NULL, relative.bol = FALSE)
}
\arguments{
\item{dat}{An array. The retro function produces a list of arrays, any of
those arrays can be used at the dat argument. Column names define each of
the performance metrics, row names define the models. Performance metrics
can include: "MRE", "MAE", "MPE", "MAPE", "MASE", "RMSE".}

\item{columnToRank}{A character or integer vector. Values represent the index
or names of columns to be ranked. If NA (the default) then all columns are
ranked.}

\item{relative.bol}{A Boolean. FALSE means use ordinal ranking (i.e. first,
second, third,...). TRUE will use scaled ranking. Default is FALSE. Look to
Details for additional information.}
}
\value{
A list of data frames. Each data frame represents the results of each
  age class (i.e. the third dimension of the input array). with ranking by
  performance metric and overall average.
}
\description{
Calculate age-specific and overall model rank.
}
\details{
Ranking output can be produced in two forms: ordinal (default) and
  scaled. This is chosen using the argument 'relative.bol'. Ordinal ranking
  produces estimates, by column, in the form: (first, second, third, ...).
  Scaled ranking produces values based on relative distance between input
  data (i.e. performance metric values). Using relative ranking, the best
  rank value equals zero and the last rank value equals the number of data
  points being ranked. This approach may better represent results, especially
  once ranks are averaged to an overall rank estimate.
}
\examples{
\dontrun{
dat.rank <- apply(dat.arr, 3, function(x){
  #input to ranking must be a data frame
  dat <- as.data.frame(x)
  #if argument columnToRank is left as NA (default) then all columns are used in ranking
  dat.rank <- getRanks(dat)
  return(dat.rank)
  })

  str(dat.rank)

  #rank by column name
  getRanks(dat.arr[,,1], columnToRank = "MRE")
  #rank by column index
  getRanks(dat.arr[,,1], columnToRank = 1)
}
}
